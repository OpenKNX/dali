// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------- //
// dali_tx //
// ------- //

#define dali_tx_wrap_target 0
#define dali_tx_wrap 20

static const uint16_t dali_tx_program_instructions[] = {
            //     .wrap_target
    0x80a0, //  0: pull   block                      
    0xa027, //  1: mov    x, osr                     
    0x0043, //  2: jmp    x--, 3                     
    0x80a0, //  3: pull   block                      
    0xa047, //  4: mov    y, osr                     
    0xbd42, //  5: nop                    side 1 [5] 
    0xb242, //  6: nop                    side 0 [2] 
    0x6041, //  7: out    y, 1                       
    0x008c, //  8: jmp    y--, 12                    
    0x000a, //  9: jmp    10                         
    0xb542, // 10: nop                    side 0 [5] 
    0x190f, // 11: jmp    15              side 1 [1] 
    0xa042, // 12: nop                               
    0xbd42, // 13: nop                    side 1 [5] 
    0x110f, // 14: jmp    15              side 0 [1] 
    0x0047, // 15: jmp    x--, 7                     
    0xa242, // 16: nop                           [2] 
    0xb542, // 17: nop                    side 0 [5] 
    0xb542, // 18: nop                    side 0 [5] 
    0xb542, // 19: nop                    side 0 [5] 
    0xb542, // 20: nop                    side 0 [5] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program dali_tx_program = {
    .instructions = dali_tx_program_instructions,
    .length = 21,
    .origin = -1,
};

static inline pio_sm_config dali_tx_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + dali_tx_wrap_target, offset + dali_tx_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}

static inline void dali_tx_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_gpio_init(pio, pin);
    pio_sm_config c = dali_tx_program_get_default_config(offset);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
    sm_config_set_sideset_pins(&c, pin);
    sm_config_set_clkdiv(&c, (clock_get_hz(clk_sys) / 1000000) * 416.67 / 6);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

#endif

// ------- //
// dali_rx //
// ------- //

#define dali_rx_wrap_target 0
#define dali_rx_wrap 10

static const uint16_t dali_rx_program_instructions[] = {
            //     .wrap_target
    0xe025, //  0: set    x, 5                       
    0x20a0, //  1: wait   1 pin, 0                   
    0xc010, //  2: irq    nowait 0 rel               
    0x4001, //  3: in     pins, 1                    
    0xd010, //  4: irq    nowait 0 rel    side 0     
    0x00c7, //  5: jmp    pin, 7                     
    0x0008, //  6: jmp    8                          
    0xe025, //  7: set    x, 5                       
    0xa242, //  8: nop                           [2] 
    0x0043, //  9: jmp    x--, 3                     
    0x8000, // 10: push   noblock                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program dali_rx_program = {
    .instructions = dali_rx_program_instructions,
    .length = 11,
    .origin = -1,
};

static inline pio_sm_config dali_rx_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + dali_rx_wrap_target, offset + dali_rx_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}

static inline void dali_rx_program_init(PIO pio, uint sm, uint offset, uint pin) {
    // pio_gpio_init(pio, 18);
    pio_gpio_init(pio, pin);
    pio_sm_config c = dali_rx_program_get_default_config(offset);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
    // pio_sm_set_consecutive_pindirs(pio, sm, 18, 1, true);
    sm_config_set_in_pins(&c, pin);
    sm_config_set_in_pin_base(&c, pin);
    sm_config_set_in_pin_count(&c, 1);
    sm_config_set_jmp_pin(&c, pin);
    sm_config_set_clkdiv(&c, (clock_get_hz(clk_sys) / 1000000) * 416.67 / 8 );
    // sm_config_set_sideset_pins(&c, 18);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    sm_config_set_in_shift(&c, false, true, 2);
    // sm_config_set_set_pin_base(&c, 18);
    sm_config_set_set_pin_count(&c, 1);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

#endif
